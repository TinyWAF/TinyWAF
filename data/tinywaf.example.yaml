listen:
  # Array of IP:port or non-TLS domain:port combinations to listen on
  hosts:
    - example.com:8080
  # Array of TLS domains to listen on. TinyWAF will auto-provision TLS
  # certificates for these domains from Let's Encrypt
  tlsDomains:
    - example.com
  forwardToLocalPort: 80
  # An array of headers that should be removed from the response
  stripResponseHeaders:
    - server
    # - x-waf-requestid # Remove the inspection header added by tinywaf

log:
  # If file is not provided, logs will be written to stdout/stderr
  file: /var/log/tinywaf.log
  levels:
    debug: false # Log everything (will generate a huge amount of logs)
    warn: true # Log warnings about suspicious activity
    block: true # Log when requests are blocked due to rules

# By default TinyWAF returns a basic HTML response if a request is blocked). To
# show custom (eg. branded) HTML pages to users customize these files then
# uncomment the lines:
html:
  # blocked: /var/tinywaf/html/403-blocked.html
  # unavailable: /var/tinywaf/html/503-unavailable.html

# Send anonymous aggregated stats every few minutes to TinyWAF. These stats only
# include the following data: "requestsInspected: X, blockedRequests: Y". These
# aggregated numbers are used to increment the counters on tinywaf.com.
stats:
  enabled: true
  # Set to a custom URL to receieve the stats to your own server instead
  # postUrl: ""

rulesets:
  # inspectOnly: true # Disables blocking, will log warnings instead
  include:
    - /var/tinywaf/rules/default-managed/*.yaml
    - /var/tinywaf/rules/*.yaml
  # By default all included rules are enabled for all hosts and URL paths
  overrides:
    - host: "test.com"
      disable:
        - "GET::/my-wp-site/*::no-wordpress:*" # Disable all rules in the 'no-wordpress' group for GET requests to test.com/my-wp-site
    - host: "example.com"
      disable:
        - "*::*::no-bots:*" # Disable all rules in the 'no-bots' group for all requests to any path on example.com
